#include <unordered_map>
#include <vector>
#include <string>
#include <fstream>
#include <chrono>
#include <algorithm>
#include <iomanip>
#include <cstdint>

bool writeTimestampDeltaCSV(
    const std::unordered_map<uint64_t, std::vector<ParsedPacketInfo>>& packetMap,
    const std::string& outputDir) {
    
    // Construct the output file path
    std::string filename = outputDir;
    if (!filename.empty() && filename.back() != '/' && filename.back() != '\\') {
        filename += "/";
    }
    filename += "timestamp_deltas.csv";
    
    // Open the file for writing
    std::ofstream csvFile(filename);
    if (!csvFile.is_open()) {
        return false;
    }
    
    // Write CSV header
    csvFile << "entry_id,timestamp_seconds,delta_microseconds\n";
    
    // Process each entry in the map
    for (const auto& [key, packetVector] : packetMap) {
        // Skip if the vector doesn't contain exactly 2 packets
        if (packetVector.size() != 2) {
            continue;
        }
        
        // Get timestamps from both packets
        auto timestamp1 = packetVector[0].getTimeStamp();
        auto timestamp2 = packetVector[1].getTimeStamp();
        
        // Find the smaller timestamp for x-axis
        auto minTimestamp = std::min(timestamp1, timestamp2);
        auto maxTimestamp = std::max(timestamp1, timestamp2);
        
        // Calculate the delta in nanoseconds first for precision
        auto deltaNanos = std::chrono::duration_cast<std::chrono::nanoseconds>(
            maxTimestamp - minTimestamp
        ).count();
        
        // Convert nanoseconds to microseconds with decimal precision
        double deltaMicroseconds = deltaNanos / 1000.0;
        
        // Convert minimum timestamp to seconds since epoch with nanosecond precision
        auto epochTime = minTimestamp.time_since_epoch();
        auto totalNanos = std::chrono::duration_cast<std::chrono::nanoseconds>(epochTime).count();
        
        // Convert to seconds with full precision
        double timestampInSeconds = totalNanos / 1000000000.0;
        
        // Write to CSV with appropriate precision
        csvFile << std::fixed << std::setprecision(9);  // 9 decimal places for nanosecond precision
        csvFile << key << "," << timestampInSeconds << ",";
        csvFile << std::setprecision(3);  // 3 decimal places for microseconds (preserving nanos)
        csvFile << deltaMicroseconds << "\n";
    }
    
    // Check if writing was successful
    if (csvFile.fail()) {
        csvFile.close();
        return false;
    }
    
    csvFile.close();
    return true;
}
