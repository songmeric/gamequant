#include <cstdint>
#include <string_view>
#include <charconv>
#include <ctime>

// Parse UTC timestamp string_view to uint64_t nanoseconds since epoch
// Format: YYYY-MM-DD HH:MM:SS.nnnnnnnnn
uint64_t parseTimestampToNanos(std::string_view timestamp) {
    // Expected format: "YYYY-MM-DD HH:MM:SS.nnnnnnnnn"
    // Positions:        0123456789012345678901234567
    
    // Parse using from_chars (C++17)
    int year, month, day, hour, minute, second;
    
    auto res = std::from_chars(timestamp.data(), timestamp.data() + 4, year);
    res = std::from_chars(timestamp.data() + 5, timestamp.data() + 7, month);
    res = std::from_chars(timestamp.data() + 8, timestamp.data() + 10, day);
    res = std::from_chars(timestamp.data() + 11, timestamp.data() + 13, hour);
    res = std::from_chars(timestamp.data() + 14, timestamp.data() + 16, minute);
    res = std::from_chars(timestamp.data() + 17, timestamp.data() + 19, second);
    
    // Parse nanoseconds
    uint64_t nanos_frac = 0;
    if (timestamp.length() > 20 && timestamp[19] == '.') {
        // Get nanosecond substring
        auto nano_start = timestamp.data() + 20;
        auto nano_len = std::min<size_t>(9, timestamp.length() - 20);
        
        // Parse what we have
        uint64_t parsed_value = 0;
        std::from_chars(nano_start, nano_start + nano_len, parsed_value);
        
        // Scale to nanoseconds (multiply by 10^(9-nano_len))
        uint64_t scale = 1;
        for (size_t i = nano_len; i < 9; ++i) {
            scale *= 10;
        }
        nanos_frac = parsed_value * scale;
    }
    
    // Convert to UTC time
    std::tm tm = {};
    tm.tm_year = year - 1900;
    tm.tm_mon = month - 1;
    tm.tm_mday = day;
    tm.tm_hour = hour;
    tm.tm_min = minute;
    tm.tm_sec = second;
    tm.tm_isdst = 0;
    
    // timegm for UTC (available on Linux)
    std::time_t time_seconds = timegm(&tm);
    
    // Check for errors
    if (time_seconds == -1) {
        return 0;  // or handle error as needed
    }
    
    // Check for negative time (before 1970)
    if (time_seconds < 0) {
        return 0;  // or handle pre-1970 dates as needed
    }
    
    // Now safe to cast
    return static_cast<uint64_t>(time_seconds) * 1'000'000'000ULL + nanos_frac;
}
