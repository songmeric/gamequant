#include <gtest/gtest.h>
#include "OutputFileWriter.h"
#include <filesystem>
#include <fstream>
#include <sstream>

namespace pme {

class OutputFileWriterTest : public ::testing::Test {
protected:
    void SetUp() override {
        test_dir_ = std::filesystem::temp_directory_path() / "output_writer_test";
        std::filesystem::create_directories(test_dir_);
    }
    
    void TearDown() override {
        std::filesystem::remove_all(test_dir_);
    }
    
    // Helper to create test joined messages
    std::vector<JoinedMsgs> createTestData() {
        std::vector<JoinedMsgs> data;
        
        // Create timestamps with known values
        auto base_time = std::chrono::high_resolution_clock::now();
        
        // Store the flow set name in a variable to avoid passing temporary
        std::string flowSetName = "TestSet";
        
        // First message pair - 100ns latency
        ParsedMsgInfo ingress1(base_time);
        ParsedMsgInfo egress1(base_time + std::chrono::nanoseconds(100));
        data.emplace_back(ingress1, egress1, flowSetName);
        
        // Second message pair - 250ns latency
        ParsedMsgInfo ingress2(base_time + std::chrono::microseconds(1));
        ParsedMsgInfo egress2(base_time + std::chrono::microseconds(1) + std::chrono::nanoseconds(250));
        data.emplace_back(ingress2, egress2, flowSetName);
        
        // Third message pair - 50ns latency
        ParsedMsgInfo ingress3(base_time + std::chrono::microseconds(2));
        ParsedMsgInfo egress3(base_time + std::chrono::microseconds(2) + std::chrono::nanoseconds(50));
        data.emplace_back(ingress3, egress3, flowSetName);
        
        return data;
    }
    
    // Helper to read CSV file
    std::vector<std::string> readCsvLines(const std::string& filepath) {
        std::vector<std::string> lines;
        std::ifstream file(filepath);
        std::string line;
        while (std::getline(file, line)) {
            lines.push_back(line);
        }
        return lines;
    }
    
    std::filesystem::path test_dir_;
};

// Test writing valid data
TEST_F(OutputFileWriterTest, WriteValidData) {
    auto testData = createTestData();
    
    bool result = OutputFileWriter::writeFlowSet(
        testData, 
        "TestFlow", 
        test_dir_.string() + "/"
    );
    
    EXPECT_TRUE(result);
    
    // Verify file exists
    auto expected_file = test_dir_ / "TestFlow_results.csv";
    EXPECT_TRUE(std::filesystem::exists(expected_file));
    
    // Verify file content
    auto lines = readCsvLines(expected_file.string());
    ASSERT_GE(lines.size(), 4);  // Header + 3 data lines
    
    // Check header
    EXPECT_EQ(lines[0], "entry_index,ingress_timestamp_ns,egress_timestamp_ns,latency_ns");
    
    // Verify we have 3 data lines
    EXPECT_EQ(lines.size() - 1, testData.size());
}

// Test writing empty data
TEST_F(OutputFileWriterTest, WriteEmptyData) {
    std::vector<JoinedMsgs> emptyData;
    
    bool result = OutputFileWriter::writeFlowSet(
        emptyData, 
        "EmptyFlow", 
        test_dir_.string() + "/"
    );
    
    EXPECT_TRUE(result);
    
    // Verify file exists with only header
    auto expected_file = test_dir_ / "EmptyFlow_results.csv";
    EXPECT_TRUE(std::filesystem::exists(expected_file));
    
    auto lines = readCsvLines(expected_file.string());
    ASSERT_EQ(lines.size(), 1);  // Only header
    EXPECT_EQ(lines[0], "entry_index,ingress_timestamp_ns,egress_timestamp_ns,latency_ns");
}

// Test invalid output directory
TEST_F(OutputFileWriterTest, InvalidOutputDirectory) {
    auto testData = createTestData();
    
    // Try to write to non-existent directory
    bool result = OutputFileWriter::writeFlowSet(
        testData, 
        "TestFlow", 
        "/invalid/path/that/does/not/exist/"
    );
    
    EXPECT_FALSE(result);
}

// Test latency calculation
TEST_F(OutputFileWriterTest, VerifyLatencyCalculation) {
    // Create messages with known latencies
    std::vector<JoinedMsgs> data;
    
    auto ingress_time = std::chrono::high_resolution_clock::time_point(std::chrono::nanoseconds(1000000));
    auto egress_time = std::chrono::high_resolution_clock::time_point(std::chrono::nanoseconds(1000500));
    
    ParsedMsgInfo ingress(ingress_time);
    ParsedMsgInfo egress(egress_time);
    std::string flowSetName = "TestSet";
    data.emplace_back(ingress, egress, flowSetName);
    
    bool result = OutputFileWriter::writeFlowSet(
        data, 
        "LatencyTest", 
        test_dir_.string() + "/"
    );
    
    EXPECT_TRUE(result);
    
    // Read and parse the output
    auto lines = readCsvLines((test_dir_ / "LatencyTest_results.csv").string());
    ASSERT_EQ(lines.size(), 2);  // Header + 1 data line
    
    // Parse the data line
    std::stringstream ss(lines[1]);
    std::string index, ingress_ns, egress_ns, latency_ns;
    std::getline(ss, index, ',');
    std::getline(ss, ingress_ns, ',');
    std::getline(ss, egress_ns, ',');
    std::getline(ss, latency_ns, ',');
    
    EXPECT_EQ(index, "0");
    EXPECT_EQ(ingress_ns, "1000000");
    EXPECT_EQ(egress_ns, "1000500");
    EXPECT_EQ(latency_ns, "500");  // 500ns latency
}

// Test multiple flow sets
TEST_F(OutputFileWriterTest, MultipleFlowSets) {
    auto testData1 = createTestData();
    auto testData2 = createTestData();
    
    // Write first flow set
    bool result1 = OutputFileWriter::writeFlowSet(
        testData1, 
        "FlowSet1", 
        test_dir_.string() + "/"
    );
    
    // Write second flow set
    bool result2 = OutputFileWriter::writeFlowSet(
        testData2, 
        "FlowSet2", 
        test_dir_.string() + "/"
    );
    
    EXPECT_TRUE(result1);
    EXPECT_TRUE(result2);
    
    // Verify both files exist
    EXPECT_TRUE(std::filesystem::exists(test_dir_ / "FlowSet1_results.csv"));
    EXPECT_TRUE(std::filesystem::exists(test_dir_ / "FlowSet2_results.csv"));
}

} // namespace pme 
