#include <gtest/gtest.h>
#include "SpcastV3Handler.h"
#include <md_api/proto/spcast_v3.h>
#include "Types.h"
#include "Hash.h"
#include "Config.h"

namespace pme {

class SpcastV3HandlerTest : public ::testing::Test {
protected:
    AppConfig config;
    std::unique_ptr<SpcastV3Handler> handler;
    
    void SetUp() override {
        config.oldest_spcast_date = parseDateToHighResolutionClock("01/01/2020");
        handler = std::make_unique<SpcastV3Handler>(config);
    }
};

// Test parsing a real SpcastV3 packet with one message
TEST_F(SpcastV3HandlerTest, ParseSingleMessage) {
    // Create packet header + one message
    const uint16_t msg_size = sizeof(spcast::SpcastVersion3Traits::MessageHeader) + 8; // header + symbol
    std::vector<uint8_t> packet(sizeof(spcast::SpcastVersion3Traits::PacketHeader) + msg_size);
    
    // Fill packet header
    auto* pktHdr = reinterpret_cast<spcast::SpcastVersion3Traits::PacketHeader*>(packet.data());
    pktHdr->version = spcast::SpcastVersion3Traits::Version;
    pktHdr->recv_timestamp_ns = 1750000000000000000;
    pktHdr->send_timestamp_ns = 1750000000000000001;
    
    // Fill message header
    auto* msgHdr = reinterpret_cast<spcast::SpcastVersion3Traits::MessageHeader*>(
        packet.data() + sizeof(spcast::SpcastVersion3Traits::PacketHeader));
    msgHdr->length = msg_size;
    msgHdr->symbol_offset = sizeof(spcast::SpcastVersion3Traits::MessageHeader);
    msgHdr->symbol_size = 8;
    msgHdr->seq_num = 12345;
    msgHdr->exch_timestamp_ns = 1750000000000000000;
    
    Flow flow{"TestFlow", "Set1", Protocol{}, "", "", 0, 0, FlowDirection::INGRESS};
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    auto messages = handler->getMessages(&flow, packet.data(), packet.size(), timestamp);
    
    ASSERT_EQ(messages.size(), 1);
    EXPECT_EQ(messages[0].join_key, generateHash(12345, 1750000000000000000, 1750000000000000001));
}

// Test duplicate detection - same sequence should be ignored
TEST_F(SpcastV3HandlerTest, SkipDuplicateSequence) {
    // Create same packet
    const uint16_t msg_size = sizeof(spcast::SpcastVersion3Traits::MessageHeader) + 8;
    std::vector<uint8_t> packet(sizeof(spcast::SpcastVersion3Traits::PacketHeader) + msg_size);
    
    auto* pktHdr = reinterpret_cast<spcast::SpcastVersion3Traits::PacketHeader*>(packet.data());
    pktHdr->version = spcast::SpcastVersion3Traits::Version;
    pktHdr->recv_timestamp_ns = 1750000000000000000;
    pktHdr->send_timestamp_ns = 1750000000000000001;
    
    auto* msgHdr = reinterpret_cast<spcast::SpcastVersion3Traits::MessageHeader*>(
        packet.data() + sizeof(spcast::SpcastVersion3Traits::PacketHeader));
    msgHdr->length = msg_size;
    msgHdr->symbol_offset = sizeof(spcast::SpcastVersion3Traits::MessageHeader);
    msgHdr->symbol_size = 8;
    msgHdr->seq_num = 99999;
    msgHdr->exch_timestamp_ns = 1750000000000000000;
    
    Flow flow{"TestFlow", "Set1", Protocol{}, "", "", 0, 0, FlowDirection::INGRESS};
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    // First call processes
    auto messages1 = handler->getMessages(&flow, packet.data(), packet.size(), timestamp);
    ASSERT_EQ(messages1.size(), 1);
    
    // Second call with same sequence skips
    auto messages2 = handler->getMessages(&flow, packet.data(), packet.size(), timestamp);
    EXPECT_EQ(messages2.size(), 0);
}

// Test different flows track sequences independently
TEST_F(SpcastV3HandlerTest, FlowsAreIndependent) {
    // Create a fresh handler to ensure clean state
    AppConfig fresh_config;
    fresh_config.oldest_spcast_date = parseDateToHighResolutionClock("01/01/2020");
    auto fresh_handler = std::make_unique<SpcastV3Handler>(fresh_config);
    
    const uint16_t msg_size = sizeof(spcast::SpcastVersion3Traits::MessageHeader) + 8;
    std::vector<uint8_t> packet(sizeof(spcast::SpcastVersion3Traits::PacketHeader) + msg_size);
    
    auto* pktHdr = reinterpret_cast<spcast::SpcastVersion3Traits::PacketHeader*>(packet.data());
    pktHdr->version = spcast::SpcastVersion3Traits::Version;
    pktHdr->recv_timestamp_ns = 1750000000000000000;
    pktHdr->send_timestamp_ns = 1750000000000000001;
    
    auto* msgHdr = reinterpret_cast<spcast::SpcastVersion3Traits::MessageHeader*>(
        packet.data() + sizeof(spcast::SpcastVersion3Traits::PacketHeader));
    msgHdr->length = msg_size;
    msgHdr->symbol_offset = sizeof(spcast::SpcastVersion3Traits::MessageHeader);
    msgHdr->symbol_size = 8;
    msgHdr->seq_num = 5000;
    msgHdr->exch_timestamp_ns = 1750000000000000000;
    
    Flow flow1{"Set1", "Flow1", Protocol{}, "", "", 0, 0, FlowDirection::INGRESS};
    Flow flow2{"Set1", "Flow2", Protocol{}, "", "", 0, 0, FlowDirection::INGRESS};
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    // Same packet on different flows should both process
    auto messages1 = fresh_handler->getMessages(&flow1, packet.data(), packet.size(), timestamp);
    auto messages2 = fresh_handler->getMessages(&flow2, packet.data(), packet.size(), timestamp);
    
    EXPECT_EQ(messages1.size(), 1);
    EXPECT_EQ(messages2.size(), 1);
}

// Test invalid version is rejected
TEST_F(SpcastV3HandlerTest, RejectWrongVersion) {
    std::vector<uint8_t> packet(sizeof(spcast::SpcastVersion3Traits::PacketHeader));
    auto* pktHdr = reinterpret_cast<spcast::SpcastVersion3Traits::PacketHeader*>(packet.data());
    pktHdr->version = static_cast<md_api::proto::spcast_v3::version_enum>(1); // Wrong version
    
    Flow flow{"TestFlow", "Set1", Protocol{}, "", "", 0, 0, FlowDirection::INGRESS};
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    auto messages = handler->getMessages(&flow, packet.data(), packet.size(), timestamp);
    EXPECT_TRUE(messages.empty());
}

// Test old timestamps are rejected
TEST_F(SpcastV3HandlerTest, RejectOldTimestamp) {
    const uint16_t msg_size = sizeof(spcast::SpcastVersion3Traits::MessageHeader) + 8;
    std::vector<uint8_t> packet(sizeof(spcast::SpcastVersion3Traits::PacketHeader) + msg_size);
    
    auto* pktHdr = reinterpret_cast<spcast::SpcastVersion3Traits::PacketHeader*>(packet.data());
    pktHdr->version = spcast::SpcastVersion3Traits::Version;
    pktHdr->recv_timestamp_ns = 1000000000000000000; // Year 2001
    pktHdr->send_timestamp_ns = 1000000000000000000;
    
    auto* msgHdr = reinterpret_cast<spcast::SpcastVersion3Traits::MessageHeader*>(
        packet.data() + sizeof(spcast::SpcastVersion3Traits::PacketHeader));
    msgHdr->length = msg_size;
    msgHdr->seq_num = 7777;
    
    Flow flow{"TestFlow", "Set1", Protocol{}, "", "", 0, 0, FlowDirection::INGRESS};
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    auto messages = handler->getMessages(&flow, packet.data(), packet.size(), timestamp);
    EXPECT_TRUE(messages.empty());
}

} // namespace pme
