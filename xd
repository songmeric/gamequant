#include "Engine.h"
#include "ShutdownUtils.h"
#include <filesystem>
#include <chrono>
#include <vector>
#include <deque> // For discoverySuccessFlags_
#include <thread> // For std::this_thread::get_id()
#include <memory> // For std::make_unique
#include <spapp/app/wait.hpp>
#include <iostream>
#include "DropcopyHandler.h"
#include "OutputFileWriter.h"


Engine::Engine(std::shared_ptr<RuntimeContext> ctx, const EngineOptions& o)
    : ctx_(ctx),
      dc_(o.dropcopy_directory),
      directories_to_watch_(o.dirs_to_watch),
      num_worker_threads_(o.num_workers),
      queue_capacity_(o.queue_capacity),
      output_directory_(o.output_directory),
      queue_(ctx, queue_capacity_),
      log_(PME_GET_LOGGER("Engine"))
{
    PME_LOG_INFO(log_, "Engine initialized. Dirs: " << directories_to_watch_.size() << ", Workers: " << num_worker_threads_ << ", Queue Cap: " << queue_capacity_ << ".");
}

void Engine::stop() {
    PME_LOG_INFO(log_, "Engine shutting down. Joining threads.");
    ctx_->stop.store(true); //true, std::memory_order_release);
    if(OutputFileWriter::write(outputMap_, output_directory_))
    {
        PME_LOG_INFO(log_, "Successfully written output csv");
    }

    for (auto& thread : discoveryThreads_) {
        if (thread.joinable()) {
            thread.join();
            PME_LOG_INFO(log_, "Discovery threads joined.");
        }
        else
        {
            PME_LOG_INFO(log_, "Not joinable Discovery thread, skipping.");
        }
    }


    for (auto& thread : workerThreads_) {
        if (thread.joinable()) {
            thread.join();
            PME_LOG_INFO(log_, "Worker threads joined.");
        }
        else
        {
            PME_LOG_INFO(log_, "Not joinable Worker thread, skipping.");
        }
    }

    PME_LOG_INFO(log_, "Engine shutdown complete.");
}

void Engine::run() {
    PME_LOG_INFO(log_, "Engine starting...");

    for (size_t i = 0; i < directories_to_watch_.size(); ++i) {
        const auto& dir_path = directories_to_watch_[i];
        if (dir_path.empty()) {
            PME_LOG_WARN(log_, "Empty directory path provided, skipping.");
            continue;
        }
        PME_LOG_INFO(log_, "Creating discovery thread for directory: " << dir_path);
        discoveryThreads_.emplace_back(&Engine::discoveryInstanceLoop, this, dir_path, std::ref(queue_), std::ref(log_));
    }

    // Start Worker Threads
    workerThreads_.reserve(num_worker_threads_);
    for (unsigned i = 0; i < num_worker_threads_; ++i) {
        PME_LOG_INFO(log_, "Creating worker thread #" << (i + 1));
        workerThreads_.emplace_back(&Engine::workerMain, this);
    }

    PME_LOG_INFO(log_, "Engine running with " << discoveryThreads_.size() << " discovery thread(s) and " << workerThreads_.size() << " worker thread(s).");
    int sig = sp::app::wait();

    PME_LOG_FATAL(log_, "Shutdown signal: " << sig << " received, Engine run loop ending.");
    stop();
}

void Engine::discoveryInstanceLoop(std::string dir, FileQueue& q, px::Log* engine_logger) {
    try {
        Discovery discovery_instance(dir,q,engine_logger, ctx_);

        PME_LOG_INFO(log_, "Discovery loop started for directory: " << discovery_instance.getDirectory());
        discovery_instance.run();
        PME_LOG_INFO(log_, "Discovery loop finished for directory: " << discovery_instance.getDirectory());
    } catch (const std::exception& e) {
        PME_LOG_ERROR(log_, "Discovery failed for directory '" << dir << "': " << e.what());
        PME_LOG_ERROR(log_, "Critical component failed - initiating graceful shutdown");
        ctx_->stop.store(true);  // Signal all threads to stop
    } catch (...) {
        PME_LOG_ERROR(log_, "Discovery failed for directory '" << dir << "': unknown exception");
        PME_LOG_ERROR(log_, "Critical component failed - initiating graceful shutdown");
        ctx_->stop.store(true);  // Signal all threads to stop
    }
}

void Engine::workerMain() {
    PME_LOG_INFO(log_, "Worker thread (ID: " << std::this_thread::get_id() << ") started.");
    PacketProcessor packet_processor(dc_.getMapRef(), ctx_); // Each worker thread gets its own instance
    std::string file_path;

    while (!ctx_->stop.load()) {
        bool popped_item = queue_.pop(file_path); // Blocking pop

        if (ctx_->stop.load() && !popped_item) { // Check if shutdown was reason for pop failing
            PME_LOG_INFO(log_, "Worker (Thread ID: " << std::this_thread::get_id() << ") breaking main loop due to shutdown signal and empty queue after pop attempt.");
            break;
        }

        if (ctx_->stop.load() && popped_item) {
            PME_LOG_INFO(log_, "Worker (Thread ID: " << std::this_thread::get_id() << ") popped an item but shutdown was requested. Will process then check shutdown again.");
        }

        if (popped_item) {
            bool process_this_file = false;
            {
                std::lock_guard<std::mutex> guard(processed_files_mutex_);
                if (processed_files_.find(file_path) == processed_files_.end()) {
                    processed_files_.insert(file_path);
                    process_this_file = true;
                } else {
                    PME_LOG_INFO(log_, "File '" << file_path << "' already processed or currently being processed by another worker. Skipping. Thread ID: " << std::this_thread::get_id());
                }
            }

            if (process_this_file) {
                PME_LOG_DEBUG(log_, "Worker (Thread ID: " << std::this_thread::get_id() << ") processing file: " << file_path);
                std::unordered_map<uint64_t, std::vector<ParsedPacketInfo>> tMap = packet_processor.processFile(file_path); // Use PacketProcessor instance
                
                // Protect outputMap_ with mutex
                {
                    std::lock_guard<std::mutex> guard(processed_files_mutex_);
                    outputMap_.insert(tMap.begin(), tMap.end());
                }
            }
        } else if (!ctx_->stop.load()) { // Popped_item is false, but not due to shutdown
            PME_LOG_TRACE(log_, "Worker pop returned false but not shutting down, yielding. Thread ID: " << std::this_thread::get_id());
            std::this_thread::yield();
        }
    }

    PME_LOG_INFO(log_, "Worker (Thread ID: " << std::this_thread::get_id() << ") entering shutdown drain loop.");
    while (queue_.pop(file_path)) {
        bool process_this_file = false;
        {
            std::lock_guard<std::mutex> guard(processed_files_mutex_);
            if (processed_files_.find(file_path) == processed_files_.end()) {
                processed_files_.insert(file_path);
                process_this_file = true;
            } else {
                PME_LOG_INFO(log_, "File '" << file_path << "' (drain) already processed. Skipping. Thread ID: " << std::this_thread::get_id());
            }
        }
        if (process_this_file) {
            PME_LOG_DEBUG(log_, "Worker (Thread ID: " << std::this_thread::get_id() << ", shutdown drain) processing remaining file: " << file_path);
            std::unordered_map<uint64_t, std::vector<ParsedPacketInfo>> tMap = packet_processor.processFile(file_path); // Use PacketProcessor instance
            
            // Protect outputMap_ with mutex
            {
                std::lock_guard<std::mutex> guard(processed_files_mutex_);
                outputMap_.insert(tMap.begin(), tMap.end());
            }
        }
    }
    PME_LOG_INFO(log_, "Worker loop finished. Thread ID: " << std::this_thread::get_id());
}









#pragma once

#include <string>
#include <thread>
#include <vector>
#include <atomic>
#include <mutex>
#include <unordered_set>
#include <memory>
#include "Discovery.h"
#include "FileQueue.h"
#include "ShutdownUtils.h"
#include "Log.h"
#include "DropcopyHandler.h"
#include "PacketProcessor.h"
#include "RuntimeContext.h"
#include "Options.h"

class Engine
{
public:
    Engine(std::shared_ptr<RuntimeContext> ctx, const EngineOptions& o);
    ~Engine() = default;
    void run();
    void stop();

private:
    void discoveryInstanceLoop(std::string dir, FileQueue& q, px::Log* engine_logger);
    void workerMain();
    std::shared_ptr<RuntimeContext> ctx_;

    std::unordered_map<uint64_t, std::vector<ParsedPacketInfo>> outputMap_;
    DropcopyHandler dc_;
    std::vector<std::string> directories_to_watch_;

    unsigned num_worker_threads_;
    unsigned queue_capacity_;
    std::string output_directory_;

    FileQueue queue_;

    std::vector<std::thread> discoveryThreads_;
    std::vector<std::thread> workerThreads_;
    px::Log* log_;

    std::unordered_set<std::string> processed_files_;
    std::mutex processed_files_mutex_;
};


#include "Discovery.h"
#include <unistd.h> // For close()
#include <sys/epoll.h> // For epoll functions
#include <filesystem> // For path manipulation
#include <cerrno> // for errno
#include <cstring> // For strerror

// Discovery Constructor (check watcher fd)
Discovery::Discovery(std::string dir, FileQueue& q, px::Log* engine_logger, std::shared_ptr<RuntimeContext> ctx)
    : watcher_(dir, [this](std::string_view name, uint32_t mask) { onEvent(name, mask); }),
      queue_(q),
      log_(engine_logger), // Use the passed logger, or create a specific one if desired
      discovery_dir_path_(std::move(dir)), // Store the directory path
      ctx_(ctx)
{
    PME_LOG_INFO(log_, "Discovery instance for directory: " << discovery_dir_path_);
    if (watcher_.fd() < 0) {
        PME_LOG_ERROR(log_, "Watcher initialization failed for directory: " << discovery_dir_path_);
        throw std::runtime_error("Failed to initialize watcher for " + discovery_dir_path_);
    }
}

void Discovery::run() {
    // Queue all existing pcap files - trust they're ready
    try {
        for (const auto& entry : std::filesystem::directory_iterator(discovery_dir_path_)) {
            if (entry.is_regular_file() && entry.path().extension() == ".pcap") {
                queue_.push(entry.path().string());
            }
        }
    } catch (const std::filesystem::filesystem_error& e) {
        PME_LOG_ERROR(log_, "Failed to scan directory: " << e.what());
        return;
    }

    // Setup epoll for new files
    int epoll_fd = epoll_create1(EPOLL_CLOEXEC);
    if (epoll_fd == -1) {
        PME_LOG_ERROR(log_, "epoll_create1 failed: " << strerror(errno));
        return;
    }

    struct epoll_event ev;
    ev.events = EPOLLIN;
    ev.data.fd = watcher_.fd();
    
    if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, watcher_.fd(), &ev) == -1) {
        PME_LOG_ERROR(log_, "epoll_ctl failed: " << strerror(errno));
        close(epoll_fd);
        return;
    }

    // Event loop
    struct epoll_event events[10];
    while (!ctx_->stop.load()) {
        int n = epoll_wait(epoll_fd, events, 10, 250);
        if (n == -1 && errno != EINTR) {
            PME_LOG_ERROR(log_, "epoll_wait failed: " << strerror(errno));
            break;
        }
        
        for (int i = 0; i < n; ++i) {
            if (events[i].data.fd == watcher_.fd()) {
                watcher_.handle();
            }
        }
    }

    close(epoll_fd);
}

void Discovery::onEvent(std::string_view filename, uint32_t mask) {
    std::filesystem::path path = filename;
    if (path.extension() != ".pcap") return;
    
    // Only care about completed writes or moves
    if (mask & (IN_CLOSE_WRITE | IN_MOVED_TO)) {
        queue_.push((std::filesystem::path(discovery_dir_path_) / filename).string());
    }
}
