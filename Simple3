###############################################################################
#  Packet-File Latency Engine  •  Multi-Watcher / Multi-Worker (C++23)
#  ────────────────────────────────────────────────────────────────────────────
#  • rigtorp::MPMCQueue wrapped with two cond-vars for **back-pressure**:
#      push()   → blocks when full   (watcher threads park)
#      pop()    → blocks when empty  (engine thread parks)
#      Each call bails out early if shutdown is requested.
#  • spapp logger wired through PME_LOG macros.
#  • ShutdownUtils installs SIGINT/SIGTERM once; `shutdown::requested()`
#    is checked in every blocking loop.
###############################################################################
CMakeLists.txt
extern/rigtorp/MPMCQueue.h              # add upstream single header
src/
 ├─ Log.h
 ├─ ShutdownUtils.h  ShutdownUtils.cpp
 ├─ FileQueue.h
 ├─ ThreadPool.h
 ├─ Watcher.h  Watcher.cpp
 ├─ Discovery.h  Discovery.cpp
 ├─ PacketProcessor.h  PacketProcessor.cpp
 ├─ Engine.h  Engine.cpp
 └─ main.cpp
###############################################################################

#──────────────────────────────  CMakeLists.txt  ─────────────────────────────
cmake_minimum_required(VERSION 3.25)
project(pme LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "build type" FORCE)
endif()

# PcapPlusPlus (local install)
set(PCPP_ROOT "$ENV{HOME}/pcpp-install" CACHE PATH "PcapPlusPlus root")
set(PCPP_INCLUDE_DIR "${PCPP_ROOT}/include")
set(PCPP_LIB_DIR     "${PCPP_ROOT}/lib64")

foreach(lib IN ITEMS Common++ Packet++ Pcap++)
    find_library(PCPP_${lib}_LIB ${lib}
        PATHS "${PCPP_LIB_DIR}" NO_DEFAULT_PATH REQUIRED)
endforeach()

add_library(PcapPlusPlus INTERFACE)
target_include_directories(PcapPlusPlus INTERFACE "${PCPP_INCLUDE_DIR}")
target_link_libraries   (PcapPlusPlus INTERFACE
        ${PCPP_Common++_LIB} ${PCPP_Packet++_LIB} ${PCPP_Pcap++_LIB})

file(GLOB_RECURSE SRC CONFIGURE_DEPENDS "src/*.cpp")
add_executable(pme ${SRC})
target_include_directories(pme PRIVATE src extern/rigtorp)
target_link_libraries      (pme PRIVATE PcapPlusPlus)

###############################################################################
#                                source files
###############################################################################

#──────────────────────────────  src/Log.h  ──────────────────────────────────
#pragma once
#include <spapp/logging/logging.hpp>
#define PME_GET_LOGGER(n) sp::logging::get_logger(n)
#define PME_LOG_DEBUG(l,m) SPLOG_DEBUG(l,m)
#define PME_LOG_INFO(l,m)  SPLOG_INFO (l,m)
#define PME_LOG_WARN(l,m)  SPLOG_WARN (l,m)
#define PME_LOG_ERROR(l,m) SPLOG_ERROR(l,m)

#──────────────────────────  src/ShutdownUtils.h  ────────────────────────────
#pragma once
#include <atomic>
namespace shutdown {
    extern std::atomic<bool> g_shutdown;
    void installSignalHandlers();
    inline bool requested() { return g_shutdown.load(std::memory_order_relaxed);}
}

#──────────────────────────  src/ShutdownUtils.cpp  ──────────────────────────
#include "ShutdownUtils.h"
#include <csignal>
std::atomic<bool> shutdown::g_shutdown{false};
static void handler(int){ shutdown::g_shutdown.store(true,std::memory_order_relaxed); }
void shutdown::installSignalHandlers(){
    struct sigaction sa{}; sa.sa_handler=handler; sigemptyset(&sa.sa_mask);
    sigaction(SIGINT ,&sa,nullptr);
    sigaction(SIGTERM,&sa,nullptr);
}

#────────────────────────────  src/FileQueue.h  ──────────────────────────────
#pragma once
#include "ShutdownUtils.h"
#include <rigtorp/MPMCQueue.h>
#include <condition_variable>
#include <mutex>
#include <string>

class FileQueue {
public:
    explicit FileQueue(std::size_t cap = 1024) : q_(cap) {}

    /* blocks until slot free or shutdown, returns false if aborted */
    bool push(std::string path) {
        std::unique_lock lk(m_);
        cv_not_full_.wait(lk,[&]{ return !q_.full() || shutdown::requested(); });
        if(shutdown::requested()) return false;
        q_.push(std::move(path));
        lk.unlock();
        cv_not_empty_.notify_one();
        return true;
    }

    /* blocks until item available or shutdown; returns false if aborted */
    bool pop(std::string &out) {
        std::unique_lock lk(m_);
        cv_not_empty_.wait(lk,[&]{ return !q_.empty() || shutdown::requested(); });
        if(shutdown::requested()) return false;
        bool ok = q_.try_pop(out);           // guaranteed true here
        lk.unlock();
        cv_not_full_.notify_one();
        return ok;
    }

private:
    rigtorp::MPMCQueue<std::string> q_;
    std::mutex          m_;
    std::condition_variable cv_not_full_, cv_not_empty_;
};

#────────────────────────────  src/ThreadPool.h  ─────────────────────────────
#pragma once
#include "ShutdownUtils.h"
#include "Log.h"
#include <condition_variable>
#include <functional>
#include <mutex>
#include <queue>
#include <thread>
#include <vector>

class ThreadPool {
public:
    explicit ThreadPool(unsigned n = std::thread::hardware_concurrency()) {
        for(unsigned i=0;i<n;++i) threads_.emplace_back([this]{ worker(); });
    }
    ~ThreadPool(){
        {std::lock_guard lk(m_); stop_=true;}
        cv_.notify_all();
        for(auto& t:threads_) t.join();
    }
    template<typename F> void enqueue(F&& f){
        {std::lock_guard lk(m_); q_.emplace(std::forward<F>(f));}
        cv_.notify_one();
    }
private:
    void worker(){
        while(true){
            std::function<void()> job;
            {
                std::unique_lock lk(m_);
                cv_.wait(lk,[&]{ return stop_||!q_.empty()||shutdown::requested();});
                if((stop_||shutdown::requested()) && q_.empty()) return;
                job=std::move(q_.front()); q_.pop();
            }
            job();
        }
    }
    std::mutex m_; std::condition_variable cv_;
    std::queue<std::function<void()>> q_;
    std::vector<std::thread> threads_;
    bool stop_{false};
};

#────────────────────────────  src/Watcher.h  ───────────────────────────────
#pragma once
#include <functional>
#include <string>
#include <sys/inotify.h>

class Watcher {
public:
    using CB = std::function<void(std::string_view,uint32_t)>;
    Watcher(std::string dir,CB cb);
    ~Watcher();
    int fd() const noexcept { return fd_; }
    void handle();
    const std::string& dir() const noexcept { return dir_; }
private:
    int fd_{-1}, wd_{-1}; std::string dir_; CB cb_;
};

#────────────────────────────  src/Watcher.cpp  ──────────────────────────────
#include "Watcher.h"
#include "Log.h"
#include <array>
#include <filesystem>
#include <stdexcept>
#include <unistd.h>

Watcher::Watcher(std::string d,CB cb):dir_(std::move(d)),cb_(std::move(cb)){
    if(!std::filesystem::is_directory(dir_))
        throw std::runtime_error("not directory: "+dir_);
    fd_=inotify_init1(IN_NONBLOCK|IN_CLOEXEC);
    if(fd_==-1) throw std::runtime_error("inotify_init1");
    wd_=inotify_add_watch(fd_,dir_.c_str(),
        IN_CREATE|IN_MOVED_TO|IN_DELETE|IN_MOVED_FROM);
    if(wd_==-1) throw std::runtime_error("add_watch");
}
Watcher::~Watcher(){ if(fd_!=-1) close(fd_); }

void Watcher::handle(){
    std::array<char,4096> buf{};
    auto n=read(fd_,buf.data(),buf.size()); if(n<=0) return;
    for(char* p=buf.data(); p<buf.data()+n;){
        auto* ev=reinterpret_cast<inotify_event*>(p);
        if(ev->len) cb_({ev->name,ev->len},ev->mask);
        p+=sizeof(inotify_event)+ev->len;
    }
}

#────────────────────────────  src/Discovery.h  ─────────────────────────────
#pragma once
#include "Watcher.h"
#include "FileQueue.h"
#include "ShutdownUtils.h"
#include <sys/epoll.h>

class Discovery {
public:
    Discovery(std::string dir,FileQueue& q);
    void run();                               // blocks until shutdown
private:
    void onEvent(std::string_view,uint32_t);
    Watcher    watcher_;
    FileQueue &queue_;
};

#────────────────────────────  src/Discovery.cpp  ───────────────────────────
#include "Discovery.h"
#include "Log.h"
#include <filesystem>
#include <unistd.h>

Discovery::Discovery(std::string dir,FileQueue& q)
    : watcher_(std::move(dir),[this](auto n,auto m){ onEvent(n,m);} ),
      queue_(q)
{
    for(auto& e:std::filesystem::directory_iterator(watcher_.dir()))
        if(e.is_regular_file()&&e.path().string().ends_with(".pcap"))
            queue_.push(e.path().string());
}

void Discovery::run(){
    int ep=epoll_create1(0);
    epoll_event ev{.events=EPOLLIN,.data={.ptr=this}};
    epoll_ctl(ep,EPOLL_CTL_ADD,watcher_.fd(),&ev);

    while(!shutdown::requested()){
        epoll_event e;
        if(epoll_wait(ep,&e,1,500)>0)
            static_cast<Discovery*>(e.data.ptr)->watcher_.handle();
    }
    close(ep);
}

void Discovery::onEvent(std::string_view name,uint32_t mask){
    if(!(mask&(IN_CREATE|IN_MOVED_TO))) return;   // ignore delete/modify
    std::string path=watcher_.dir()+'/'+std::string(name);
    if(path.ends_with(".pcap")) queue_.push(std::move(path));
}

#───────────────────────────  src/PacketProcessor.h  ─────────────────────────
#pragma once
#include <string>
void processPcap(const std::string& file);

#──────────────────────────  src/PacketProcessor.cpp  ────────────────────────
#include "PacketProcessor.h"
#include "Log.h"
#include <pcap/pcap.h>
#include <cstdio>

void processPcap(const std::string& file){
    auto lg = PME_GET_LOGGER("PacketProcessor");
    char err[PCAP_ERRBUF_SIZE]{};
    if(auto* p=pcap_open_offline(file.c_str(),err)){
        /* TODO latency logic */
        pcap_close(p);
        PME_LOG_INFO(lg,"processed "<<file);
    }else{
        PME_LOG_ERROR(lg,"open "<<file<<" failed: "<<err);
    }
}

#────────────────────────────  src/Engine.h  ────────────────────────────────
#pragma once
#include "Discovery.h"
#include "ThreadPool.h"
#include "FileQueue.h"

struct EngineCfg { unsigned watchers=1; unsigned workers=std::thread::hardware_concurrency(); };

class Engine {
public:
    Engine(std::string dir,EngineCfg cfg={});
    void run();                      // blocks until shutdown
private:
    std::string              dir_;
    EngineCfg                cfg_;
    FileQueue                queue_{1024};
    ThreadPool               pool_;
    std::vector<std::thread> watcherThreads_;
};

#────────────────────────────  src/Engine.cpp  ───────────────────────────────
#include "Engine.h"
#include "PacketProcessor.h"
#include "ShutdownUtils.h"
#include "Log.h"
#include <filesystem>

Engine::Engine(std::string d,EngineCfg cfg)
    : dir_(std::move(d)), cfg_(cfg), pool_(cfg.workers)
{
    auto lg = PME_GET_LOGGER("Engine");
    PME_LOG_INFO(lg,"watchers:"<<cfg.watchers<<" workers:"<<cfg.workers);

    for(unsigned i=0;i<cfg.watchers;++i)
        watcherThreads_.emplace_back([this]{ Discovery(dir_,queue_).run(); });
}

void Engine::run(){
    auto lg = PME_GET_LOGGER("Engine");
    std::string path;
    while(!shutdown::requested()){
        if(!queue_.pop(path)) break;                 // aborted by shutdown

        if(!std::filesystem::is_regular_file(path)||
           std::filesystem::file_size(path)==0) continue;

        pool_.enqueue([p=std::move(path)]{ processPcap(p); });
    }
    PME_LOG_INFO(lg,"joining watcher threads");
    for(auto& t:watcherThreads_) t.join();
}

#────────────────────────────  src/main.cpp  ────────────────────────────────
#include "Log.h"
#include "Engine.h"
#include "ShutdownUtils.h"
#include <spapp/logging/logging.hpp>
#include <iostream>

int main(int argc,char** argv){
    if(argc<2){ std::cerr<<"usage: pme <pcap-dir>\n"; return 1;}
    sp::logging::start(sp::logging::stdout_config());
    sp::logging::set_override(sp::logging::level::INFO);
    shutdown::installSignalHandlers();

    EngineCfg cfg; cfg.watchers=2; cfg.workers=8;   // tune as needed
    Engine eng(argv[1],cfg);
    eng.run();

    sp::logging::stop();
    return 0;
}
