// …everything else above is unchanged…

// safe quote stripper
std::string_view stripQuotes(std::string_view v) {
    if (v.size() >= 2 && v.front() == '\'' && v.back() == '\'')
        return v.substr(1, v.size() - 2);
    return v;
}

std::unordered_map<int, LatencyStats>
parseLatencyStatsFile(const std::string& filename) {
    static const std::regex line_re{
        R"(.*clordid\s*=\s*(\d+)\s*,\s*latency_stats\s*=\s*\{(.*)\}.*)"};
    std::unordered_map<int,LatencyStats> out;
    std::ifstream in{filename};
    std::string   line;
    while (std::getline(in, line)) {
        std::smatch m;
        if (!std::regex_match(line, m, line_re)) continue;
        int cid = std::stoi(m[1].str());
        std::string_view body = m[2].str();

        LatencyStats stats;
        size_t pos = 0;
        while (pos < body.size()) {
            auto [k_raw, v_raw] = parseKV(body, pos);
            auto key   = std::string(k_raw);
            auto value = stripQuotes(v_raw);

            try {
                if (key == "event_type") {
                    stats.event_type = std::string(value);
                }
                else if (key == "md_seq_num") {
                    stats.md_seq_num = std::stoi(std::string(value));
                }
                else if (key == "md_feed_name") {
                    stats.md_feed_name = std::string(value);
                }
                else if (key == "exch_seq_num") {
                    stats.exch_seq_num = std::stoi(std::string(value));
                }
                else if (key == "exch_src_id") {
                    stats.exch_src_id = std::stoi(std::string(value));
                }
                else if (key == "md_sec_ric") {
                    stats.md_sec_ric = std::stoull(std::string(value));
                }
                else if (key == "oms_queue_size") {
                    stats.oms_queue_size = std::stoi(std::string(value));
                }
                else if (key == "before_md_recv") {
                    stats.before_md_recv = parseTimestamp(value);
                }
                else {
                    // any new/unknown field
                    stats.extras.emplace(std::move(key), std::string(value));
                }
            }
            catch (const std::exception& e) {
                // e.g. stod/stoi threw or your parseTimestamp did
                stats.extras.emplace(std::move(key), std::string(value));
            }
        }

        out.emplace(cid, std::move(stats));
    }
    return out;
}
