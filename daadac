#include <gtest/gtest.h>
#include "SpcastV3Handler.h"
#include "Types.h"//for LatencyStats header
#include "Hash.h"
#include <md_api/proto/spcast_v3.h>
#include <unordered_map>
#include <vector>
#include <chrono>
#include "Protocols.h"
#include "Log.h"
#include "Config.h"

namespace pme {

// Test fixture for common setup
class SpcastV3HandlerTest : public ::testing::Test {
protected:
    AppConfig config;
    std::unique_ptr<SpcastV3Handler> handler;
    Flow test_flow{"TestFlow", "TestSet", Protocol{}, "", "", 0, 0, FlowDirection::INGRESS};
    
    void SetUp() override {
        config.oldest_spcast_date = parseDateToHighResolutionClock("01/01/2024");
        handler = std::make_unique<SpcastV3Handler>(config);
    }
    
    // Helper to create a valid SpcastV3 packet header
    std::vector<uint8_t> createPacketHeader(uint64_t recv_timestamp = 1750000000000000000,
                                           uint64_t send_timestamp = 1750000000000000000) {
        std::vector<uint8_t> buffer(sizeof(spcast::SpcastVersion3Traits::PacketHeader));
        auto* pktHdr = reinterpret_cast<spcast::SpcastVersion3Traits::PacketHeader*>(buffer.data());
        pktHdr->version = spcast::SpcastVersion3Traits::Version;
        pktHdr->recv_timestamp_ns = recv_timestamp;
        pktHdr->send_timestamp_ns = send_timestamp;
        return buffer;
    }
    
    // Helper to create a message header
    std::vector<uint8_t> createMessageHeader(uint64_t seq_num, 
                                           uint16_t length = sizeof(spcast::SpcastVersion3Traits::MessageHeader),
                                           uint64_t exch_timestamp = 1750000000000000000) {
        std::vector<uint8_t> buffer(length, 0);  // Allocate full message length
        auto* msgHdr = reinterpret_cast<spcast::SpcastVersion3Traits::MessageHeader*>(buffer.data());
        msgHdr->length = length;
        msgHdr->symbol_offset = 0;
        msgHdr->symbol_size = 4;
        msgHdr->seq_num = seq_num;
        msgHdr->exch_timestamp_ns = exch_timestamp;
        return buffer;
    }
    
    // Helper to create complete packet with messages
    std::vector<uint8_t> createPacketWithMessages(const std::vector<uint64_t>& seq_nums,
                                                 uint64_t recv_ts = 1750000000000000000,
                                                 uint64_t send_ts = 1750000000000000000) {
        auto packet = createPacketHeader(recv_ts, send_ts);
        
        for (uint64_t seq : seq_nums) {
            auto msg = createMessageHeader(seq);
            packet.insert(packet.end(), msg.begin(), msg.end());
        }
        
        return packet;
    }
};

// ===== Basic Functionality Tests =====

TEST_F(SpcastV3HandlerTest, ParseSingleValidMessage) {
    auto packet = createPacketWithMessages({100});
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    auto messages = handler->getMessages(&test_flow, packet.data(), packet.size(), timestamp);
    
    ASSERT_EQ(messages.size(), 1);
    EXPECT_EQ(messages[0].join_key, generateHash(100, 1750000000000000000, 1750000000000000000));
}

TEST_F(SpcastV3HandlerTest, ParseMultipleMessages) {
    auto packet = createPacketWithMessages({100, 101, 102});
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    auto messages = handler->getMessages(&test_flow, packet.data(), packet.size(), timestamp);
    
    ASSERT_EQ(messages.size(), 3);
    EXPECT_EQ(messages[0].join_key, generateHash(100, 1750000000000000000, 1750000000000000000));
    EXPECT_EQ(messages[1].join_key, generateHash(101, 1750000000000000000, 1750000000000000000));
    EXPECT_EQ(messages[2].join_key, generateHash(102, 1750000000000000000, 1750000000000000000));
}

TEST_F(SpcastV3HandlerTest, DuplicateSequenceNumbers) {
    // First call with seq 100
    auto packet1 = createPacketWithMessages({100});
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    auto messages1 = handler->getMessages(&test_flow, packet1.data(), packet1.size(), timestamp);
    ASSERT_EQ(messages1.size(), 1);
    
    // Second call with same seq 100 - should be skipped
    auto packet2 = createPacketWithMessages({100});
    auto messages2 = handler->getMessages(&test_flow, packet2.data(), packet2.size(), timestamp);
    EXPECT_EQ(messages2.size(), 0);  // Duplicate should be skipped
    
    // Different seq should work
    auto packet3 = createPacketWithMessages({101});
    auto messages3 = handler->getMessages(&test_flow, packet3.data(), packet3.size(), timestamp);
    EXPECT_EQ(messages3.size(), 1);
}

TEST_F(SpcastV3HandlerTest, MultipleFlows) {
    Flow flow1{"Flow1", "Set1", Protocol{}, "", "", 0, 0, FlowDirection::INGRESS};
    Flow flow2{"Flow2", "Set1", Protocol{}, "", "", 0, 0, FlowDirection::INGRESS};
    
    auto packet = createPacketWithMessages({100});
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    // Same sequence number but different flows
    auto messages1 = handler->getMessages(&flow1, packet.data(), packet.size(), timestamp);
    auto messages2 = handler->getMessages(&flow2, packet.data(), packet.size(), timestamp);
    
    EXPECT_EQ(messages1.size(), 1);
    EXPECT_EQ(messages2.size(), 1);
    
    // Same flow, same seq - should be duplicate
    auto messages3 = handler->getMessages(&flow1, packet.data(), packet.size(), timestamp);
    EXPECT_EQ(messages3.size(), 0);
}

// ===== Validation Tests =====

TEST_F(SpcastV3HandlerTest, InvalidVersion) {
    std::vector<uint8_t> buffer(sizeof(spcast::SpcastVersion3Traits::PacketHeader));
    auto* pktHdr = reinterpret_cast<spcast::SpcastVersion3Traits::PacketHeader*>(buffer.data());
    pktHdr->version = static_cast<md_api::proto::spcast_v3::version_enum>(99);  // Invalid
    pktHdr->recv_timestamp_ns = 1750000000000000000;
    pktHdr->send_timestamp_ns = 1750000000000000000;
    
    auto timestamp = std::chrono::high_resolution_clock::now();
    auto messages = handler->getMessages(&test_flow, buffer.data(), buffer.size(), timestamp);
    
    EXPECT_TRUE(messages.empty());
}

TEST_F(SpcastV3HandlerTest, PacketTooSmall) {
    std::vector<uint8_t> buffer(sizeof(spcast::SpcastVersion3Traits::PacketHeader) - 1);
    
    auto timestamp = std::chrono::high_resolution_clock::now();
    auto messages = handler->getMessages(&test_flow, buffer.data(), buffer.size(), timestamp);
    
    EXPECT_TRUE(messages.empty());
}

TEST_F(SpcastV3HandlerTest, TimestampOlderThanConfig) {
    // Set config date to future
    config.oldest_spcast_date = parseDateToHighResolutionClock("01/01/2030");
    handler = std::make_unique<SpcastV3Handler>(config);
    
    // Create packet with old timestamp
    auto packet = createPacketWithMessages({100}, 1000000000000000000, 1000000000000000000);
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    auto messages = handler->getMessages(&test_flow, packet.data(), packet.size(), timestamp);
    
    EXPECT_TRUE(messages.empty());  // Should reject old timestamps
}

// ===== Message Parsing Tests =====

TEST_F(SpcastV3HandlerTest, ZeroLengthMessage) {
    auto packet = createPacketHeader();
    
    // Add message with zero length
    std::vector<uint8_t> msg(sizeof(spcast::SpcastVersion3Traits::MessageHeader));
    auto* msgHdr = reinterpret_cast<spcast::SpcastVersion3Traits::MessageHeader*>(msg.data());
    msgHdr->length = 0;  // Invalid
    msgHdr->seq_num = 100;
    
    packet.insert(packet.end(), msg.begin(), msg.end());
    
    auto timestamp = std::chrono::high_resolution_clock::now();
    auto messages = handler->getMessages(&test_flow, packet.data(), packet.size(), timestamp);
    
    EXPECT_TRUE(messages.empty());
}

TEST_F(SpcastV3HandlerTest, TruncatedMessage) {
    auto packet = createPacketHeader();
    
    // Add message that claims to be longer than available data
    auto msg = createMessageHeader(100, 100);  // Claims 100 bytes
    msg.resize(50);  // But only provide 50
    
    packet.insert(packet.end(), msg.begin(), msg.end());
    
    auto timestamp = std::chrono::high_resolution_clock::now();
    auto messages = handler->getMessages(&test_flow, packet.data(), packet.size(), timestamp);
    
    EXPECT_TRUE(messages.empty());
}

TEST_F(SpcastV3HandlerTest, MessagesWithDifferentLengths) {
    auto packet = createPacketHeader();
    
    // Add messages of different sizes
    auto msg1 = createMessageHeader(100, 64);   // 64 bytes
    auto msg2 = createMessageHeader(101, 128);  // 128 bytes
    auto msg3 = createMessageHeader(102, 32);   // 32 bytes
    
    packet.insert(packet.end(), msg1.begin(), msg1.end());
    packet.insert(packet.end(), msg2.begin(), msg2.end());
    packet.insert(packet.end(), msg3.begin(), msg3.end());
    
    auto timestamp = std::chrono::high_resolution_clock::now();
    auto messages = handler->getMessages(&test_flow, packet.data(), packet.size(), timestamp);
    
    ASSERT_EQ(messages.size(), 3);
    EXPECT_EQ(messages[0].join_key, generateHash(100, 1750000000000000000, 1750000000000000000));
    EXPECT_EQ(messages[1].join_key, generateHash(101, 1750000000000000000, 1750000000000000000));
    EXPECT_EQ(messages[2].join_key, generateHash(102, 1750000000000000000, 1750000000000000000));
}

// ===== Hash Generation Tests =====

TEST_F(SpcastV3HandlerTest, ConsistentHashGeneration) {
    uint64_t recv_ts = 1234567890000000000;
    uint64_t send_ts = 1234567890000000001;
    
    auto packet1 = createPacketWithMessages({100}, recv_ts, send_ts);
    auto packet2 = createPacketWithMessages({200}, recv_ts, send_ts);
    
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    auto messages1 = handler->getMessages(&test_flow, packet1.data(), packet1.size(), timestamp);
    auto messages2 = handler->getMessages(&test_flow, packet2.data(), packet2.size(), timestamp);
    
    ASSERT_EQ(messages1.size(), 1);
    ASSERT_EQ(messages2.size(), 1);
    
    // Different seq nums should generate different hashes
    EXPECT_NE(messages1[0].join_key, messages2[0].join_key);
    
    // Verify hash matches expected value
    EXPECT_EQ(messages1[0].join_key, generateHash(100, recv_ts, send_ts));
    EXPECT_EQ(messages2[0].join_key, generateHash(200, recv_ts, send_ts));
}

TEST_F(SpcastV3HandlerTest, DifferentTimestampsGenerateDifferentHashes) {
    auto packet1 = createPacketWithMessages({100}, 1000000000000000000, 2000000000000000000);
    auto packet2 = createPacketWithMessages({100}, 3000000000000000000, 4000000000000000000);
    
    // Reset handler to allow same seq num
    handler = std::make_unique<SpcastV3Handler>(config);
    
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    Flow flow1{"Flow1", "Set1", Protocol{}, "", "", 0, 0, FlowDirection::INGRESS};
    Flow flow2{"Flow2", "Set1", Protocol{}, "", "", 0, 0, FlowDirection::INGRESS};
    
    auto messages1 = handler->getMessages(&flow1, packet1.data(), packet1.size(), timestamp);
    auto messages2 = handler->getMessages(&flow2, packet2.data(), packet2.size(), timestamp);
    
    ASSERT_EQ(messages1.size(), 1);
    ASSERT_EQ(messages2.size(), 1);
    
    // Same seq but different timestamps should generate different hashes
    EXPECT_NE(messages1[0].join_key, messages2[0].join_key);
}

// ===== Edge Cases =====

TEST_F(SpcastV3HandlerTest, EmptyPacketAfterHeader) {
    auto packet = createPacketHeader();
    // No messages after header
    
    auto timestamp = std::chrono::high_resolution_clock::now();
    auto messages = handler->getMessages(&test_flow, packet.data(), packet.size(), timestamp);
    
    EXPECT_TRUE(messages.empty());  // Valid but no messages
}

TEST_F(SpcastV3HandlerTest, MaxSequenceNumber) {
    auto packet = createPacketWithMessages({UINT64_MAX});
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    auto messages = handler->getMessages(&test_flow, packet.data(), packet.size(), timestamp);
    
    ASSERT_EQ(messages.size(), 1);
    EXPECT_EQ(messages[0].join_key, generateHash(UINT64_MAX, 1750000000000000000, 1750000000000000000));
}

// ===== Parameterized Tests for Various Scenarios =====

struct SpcastTestCase {
    const char* name;
    std::function<std::vector<uint8_t>()> create_packet;
    size_t expected_messages;
    bool should_warn;
};

class SpcastParameterizedTest : public SpcastV3HandlerTest,
                               public ::testing::WithParamInterface<SpcastTestCase> {};

TEST_P(SpcastParameterizedTest, ProcessesCorrectly) {
    const auto& test_case = GetParam();
    
    auto packet = test_case.create_packet();
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    auto messages = handler->getMessages(&test_flow, packet.data(), packet.size(), timestamp);
    
    EXPECT_EQ(messages.size(), test_case.expected_messages) 
        << "Test case: " << test_case.name;
}

INSTANTIATE_TEST_SUITE_P(
    SpcastScenarios,
    SpcastParameterizedTest,
    ::testing::Values(
        SpcastTestCase{
            "valid_single_message",
            []() {
                SpcastV3HandlerTest test;
                return test.createPacketWithMessages({100});
            },
            1,
            false
        },
        SpcastTestCase{
            "valid_multiple_messages",
            []() {
                SpcastV3HandlerTest test;
                return test.createPacketWithMessages({100, 101, 102, 103, 104});
            },
            5,
            false
        },
        SpcastTestCase{
            "partial_last_message",
            []() {
                SpcastV3HandlerTest test;
                auto packet = test.createPacketWithMessages({100, 101});
                // Add partial message
                auto partial = test.createMessageHeader(102, 100);
                partial.resize(50);  // Truncate
                packet.insert(packet.end(), partial.begin(), partial.end());
                return packet;
            },
            2,  // Only complete messages
            true
        },
        SpcastTestCase{
            "message_with_min_header_size",
            []() {
                SpcastV3HandlerTest test;
                auto packet = test.createPacketHeader();
                auto msg = test.createMessageHeader(100, sizeof(spcast::SpcastVersion3Traits::MessageHeader));
                packet.insert(packet.end(), msg.begin(), msg.end());
                return packet;
            },
            1,
            false
        }
    ),
    [](const ::testing::TestParamInfo<SpcastTestCase>& info) {
        return info.param.name;
    }
);

// ===== Performance Test =====

TEST_F(SpcastV3HandlerTest, LargePacketProcessing) {
    // Create packet with many messages
    std::vector<uint64_t> sequences;
    for (uint64_t i = 0; i < 1000; ++i) {
        sequences.push_back(i);
    }
    
    auto packet = createPacketWithMessages(sequences);
    auto timestamp = std::chrono::high_resolution_clock::now();
    
    auto start = std::chrono::high_resolution_clock::now();
    auto messages = handler->getMessages(&test_flow, packet.data(), packet.size(), timestamp);
    auto end = std::chrono::high_resolution_clock::now();
    
    EXPECT_EQ(messages.size(), 1000);
    
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
    // Log performance info (not a hard requirement)
    std::cout << "Processed 1000 messages in " << duration.count() << " microseconds" << std::endl;
}

} // namespace pme
